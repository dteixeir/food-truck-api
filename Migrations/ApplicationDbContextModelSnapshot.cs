// <auto-generated />
using api.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("api.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("api.Domain.FoodTruck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("FoodTrucks");
                });

            modelBuilder.Entity("api.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<Guid>("FoodTruckId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("FoodTruckId")
                        .IsUnique();

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("api.Domain.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MenuId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("api.Domain.ScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<Guid>("FoodTruckId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("FoodTruckId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("api.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<Guid>("CreateUserId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<DateTime?>("UpdateDateTime");

                    b.Property<Guid?>("UpdateUserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Domain.Company", b =>
                {
                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("api.Domain.FoodTruck", b =>
                {
                    b.HasOne("api.Domain.Company", "Company")
                        .WithMany("FoodTrucks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("api.Domain.Menu", b =>
                {
                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.FoodTruck", "FoodTruck")
                        .WithOne("Menu")
                        .HasForeignKey("api.Domain.Menu", "FoodTruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("api.Domain.MenuItem", b =>
                {
                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("api.Domain.ScheduleItem", b =>
                {
                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.FoodTruck", "FoodTruck")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("FoodTruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Domain.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("api.Domain.User", b =>
                {
                    b.HasOne("api.Domain.User", "CreateUser")
                        .WithOne("UpdateUser")
                        .HasForeignKey("api.Domain.User", "UpdateUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
